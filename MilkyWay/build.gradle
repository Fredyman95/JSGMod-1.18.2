import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mc_version}-${mod_version}"
group = "dev.tauri.jsg${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${build_extrapath}jsg-${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${forge_mapping_channel}", version: "${forge_mapping_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "jsg${mod_id}"
            mods {
                jsg {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "jsg${mod_id}"
            mods {
                jsg {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "jsg${mod_id}"
            mods {
                jsg {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "jsg${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                jsg {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        name = "Core"
        url = "https://files.justsgmod.eu/test/"
        allowInsecureProtocol = true
    }
}
dependencies {

    minecraft 'net.minecraftforge:forge:1.19-41.0.62'

    compileOnly "dev.tauri:jsg-core:1.19-1.0.0.1"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "jsg${mod_id}",
                "Specification-Vendor"    : "jsg${mod_id}sareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "jsg${mod_id}sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
processResources {
    // REPLACING TAGS IN RESOURCES FILES
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.resources.srcDirs
    filter(ReplaceTokens, tokens: [VERSION: "${project.mod_version}".toString()])
    filter(ReplaceTokens, tokens: [DESCRIPTION: "${project.description}".toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    filter(ReplaceTokens, tokens: [AUTHORS: "${project.authors}".toString()])
    filter(ReplaceTokens, tokens: [MODID: "${project.mod_id}".toString()])
    filter(ReplaceTokens, tokens: [MODNAME: "${project.mod_name}".toString()])
    into "$buildDir/src"
}
task replaceTokens(type: Sync) {
    // REPLACING TAGS IN SOURCE FILES
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [VERSION: "${project.mod_version}".toString()])
    filter(ReplaceTokens, tokens: [DESCRIPTION: "${project.description}".toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    filter(ReplaceTokens, tokens: [AUTHORS: "${project.authors}".toString()])
    filter(ReplaceTokens, tokens: [MODID: "${project.mod_id}".toString()])
    filter(ReplaceTokens, tokens: [MODNAME: "${project.mod_name}".toString()])
    into "$buildDir/src"
}
compileJava {
    source = replaceTokens.outputs
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
